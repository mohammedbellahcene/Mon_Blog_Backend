package com.blog.api.config;

import io.swagger.v3.oas.models.Components;
import io.swagger.v3.oas.models.ExternalDocumentation;
import io.swagger.v3.oas.models.OpenAPI;
import io.swagger.v3.oas.models.info.Contact;
import io.swagger.v3.oas.models.info.Info;
import io.swagger.v3.oas.models.info.License;
import io.swagger.v3.oas.models.servers.Server;
import io.swagger.v3.oas.models.tags.Tag;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import java.util.Arrays;

@Configuration
public class OpenApiConfig {

    @Bean
    public OpenAPI customOpenAPI() {
        return new OpenAPI()
            .info(new Info()
                .title("API Blog")
                .description("""
                    API compl√®te pour la gestion d'un blog moderne avec authentification, articles, commentaires et r√©actions.
                    
                    ## Fonctionnalit√©s principales
                    
                    - üë§ Authentification JWT avec refresh tokens
                    - üìù Gestion des articles avec support Markdown
                    - üí¨ Syst√®me de commentaires
                    - üëç Syst√®me de r√©actions (likes/dislikes)
                    - üé® Gestion des th√®mes
                    - üìé Upload de fichiers
                    - üîî Syst√®me de notifications
                    
                    ## Guide d'utilisation rapide
                    
                    1. Cr√©ez un compte via `/auth/register`
                    2. Connectez-vous via `/auth/login`
                    3. Utilisez le token JWT retourn√© pour les autres requ√™tes
                    
                    ## Bonnes pratiques
                    
                    - Utilisez la pagination pour les listes
                    - Respectez les limites de rate limiting
                    - V√©rifiez les codes HTTP retourn√©s
                    - Utilisez les endpoints de validation
                    """)
                .version("2.0.0")
                .contact(new Contact()
                    .name("Support Blog")
                    .email("support@blog.com")
                    .url("https://blog.com/support"))
                .license(new License()
                    .name("MIT License")
                    .url("https://opensource.org/licenses/MIT")))
            .externalDocs(new ExternalDocumentation()
                .description("Documentation compl√®te")
                .url("https://blog.com/docs"))
            .servers(Arrays.asList(
                new Server()
                    .url("http://localhost:8080")
                    .description("Serveur de d√©veloppement"),
                new Server()
                    .url("https://api.blog.com")
                    .description("Serveur de production")))
            .tags(Arrays.asList(
                createTag("auth", "Authentification et gestion des utilisateurs", """
                    Endpoints pour l'inscription, la connexion et la gestion du profil utilisateur.
                    Inclut la gestion des tokens JWT et le refresh token."""),
                createTag("posts", "Gestion des articles", """
                    CRUD complet pour les articles du blog.
                    Support du Markdown, des tags et des cat√©gories."""),
                createTag("comments", "Gestion des commentaires", """
                    Syst√®me de commentaires avec support des r√©ponses imbriqu√©es
                    et de la mod√©ration."""),
                createTag("reactions", "Syst√®me de r√©actions", """
                    Gestion des likes et dislikes sur les articles et commentaires.
                    Support des m√©triques d'engagement."""),
                createTag("themes", "Gestion des th√®mes", """
                    Personnalisation de l'apparence du blog avec support
                    des th√®mes personnalis√©s."""),
                createTag("files", "Gestion des fichiers", """
                    Upload et gestion des fichiers m√©dia.
                    Support des images, vid√©os et documents."""),
                createTag("notifications", "Syst√®me de notifications", """
                    Notifications en temps r√©el pour les interactions
                    et les nouveaux contenus.""")))
            .components(new Components());
    }

    private Tag createTag(String name, String description, String detailedDescription) {
        return new Tag()
            .name(name)
            .description(description)
            .externalDocs(new ExternalDocumentation()
                .description(detailedDescription));
    }
} 